#version 430 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(binding = 5,rgba32f) uniform image2D filteredFrame;

layout(binding=0) uniform sampler2D lastFrame;
layout(binding=1) uniform sampler2D frameTexture;
layout(binding=3) uniform sampler2D PositionWithDepth;
layout(binding=2) uniform sampler2D NormalWithMaterial;
uniform mat4 lastViewMat;
uniform mat4 projection;
uniform bool  isFirstFrame;
uniform float frameCounter;


int kernalRadius = 3;

float m_sigmaCoord=32.0f;
float m_sigmaColor=0.8f;
float m_sigmaNormal=0.1f;
float m_sigmaPlane=0.1f;

vec3 RGB2YCoCgR(vec3 rgbColor)
{
    vec3 YCoCgRColor;

    YCoCgRColor.y = rgbColor.r - rgbColor.b;
    float temp = rgbColor.b + YCoCgRColor.y / 2;
    YCoCgRColor.z = rgbColor.g - temp;
    YCoCgRColor.x = temp + YCoCgRColor.z / 2;

    return YCoCgRColor;
}

vec3 YCoCgR2RGB(vec3 YCoCgRColor)
{
    vec3 rgbColor;

    float temp = YCoCgRColor.x - YCoCgRColor.z / 2;
    rgbColor.g = YCoCgRColor.z + temp;
    rgbColor.b = temp - YCoCgRColor.y / 2;
    rgbColor.r = rgbColor.b + YCoCgRColor.y;

    return rgbColor;
}

float Luminance(vec3 color)
{
    return 0.25 * color.r + 0.5 * color.g + 0.25 * color.b;
}

vec3 ToneMap(vec3 color)
{
    return color / (1 + Luminance(color));
}

vec3 UnToneMap(vec3 color)
{
    return color / (1 - Luminance(color));
}
vec3 clipAABB(vec3 nowColor, vec3 preColor)
{
    vec3 aabbMin = nowColor, aabbMax = nowColor;
    vec2 deltaRes = vec2(1.0 / 512.0, 1.0 / 512.0);
    vec3 m1 = vec3(0), m2 = vec3(0);

    for(int i=-1;i<=1;++i)
    {
        for(int j=-1;j<=1;++j)
        {
            ivec2 newUV = ivec2(gl_GlobalInvocationID.xy+vec2(i,j));
            vec3 C = RGB2YCoCgR(ToneMap(texelFetch(frameTexture, newUV,0).rgb));
            m1 += C;
            m2 += C * C;
        }
    }

    // Variance clip
    const int N = 9;
    const float VarianceClipGamma = 1.0f;
    vec3 mu = m1 / N;
    vec3 sigma = sqrt(abs(m2 / N - mu * mu));
    aabbMin = mu - VarianceClipGamma * sigma;
    aabbMax = mu + VarianceClipGamma * sigma;

    // clip to center
    vec3 p_clip = 0.5 * (aabbMax + aabbMin);
    vec3 e_clip = 0.5 * (aabbMax - aabbMin);

    vec3 v_clip = preColor - p_clip;
    vec3 v_unit = v_clip.xyz / e_clip;
    vec3 a_unit = abs(v_unit);
    float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));

    if (ma_unit > 1.0)
        return p_clip + v_clip / ma_unit;
    else
        return preColor;
}
void main(){

	vec4 color = texelFetch(frameTexture,ivec2(gl_GlobalInvocationID.xy),0).rgba;
	if(isFirstFrame){
		imageStore(filteredFrame,ivec2(gl_GlobalInvocationID.xy),vec4(color));
	
	}else{

//        vec3 resColor=vec3(0.0);
//        float weight_sum=0.0f;
        if(color.a!=0){

//            //滤波
//            ivec2 index = ivec2(gl_GlobalInvocationID.xy);
//            int x_start = max(0,index.x-kernalRadius);
//            int x_end = min(512-1,index.x+kernalRadius);
//            int y_start = max(0,index.y-kernalRadius);
//            int y_end = min(512-1,index.y+kernalRadius);
//            vec4 centerPosWithDepth = texelFetch(PositionWithDepth,ivec2(gl_GlobalInvocationID.xy),0);
//            vec4 centerNormalWithMaterial = texelFetch(NormalWithMaterial,ivec2(gl_GlobalInvocationID.xy),0);
//
//            for(int m=x_start;m<=x_end;m++){
//            
//                for(int n=y_start;n<=y_end;n++){
//                
//                    if(n==index.y&&m==index.x){
//                              
//                        weight_sum+=1.0f;
//                        resColor+=color.rgb;
//                    
//                    }
//                    vec4 indexColor = texelFetch(frameTexture,ivec2(gl_GlobalInvocationID.xy+vec2(m,n)),0);
//
//                    
//                    //不是天空光
//                    if(indexColor.a!=0){
//                    
//                        vec4 curPosWithDepth = texelFetch(PositionWithDepth,ivec2(gl_GlobalInvocationID.xy+vec2(m,n)),0);
//                        vec4 curNormalWithMaterial = texelFetch(NormalWithMaterial,ivec2(gl_GlobalInvocationID.xy+vec2(m,n)),0);
//                       float plane_dis = .0f;
//           
//                       float pos_dis = distance(curPosWithDepth.xyz,centerPosWithDepth.xyz);
//
//                       float color_dis = distance(indexColor.rgb,color.rgb);
//
//                       float normal_dis = distance(centerNormalWithMaterial.xyz,curNormalWithMaterial.xyz);
//
//                       if(pos_dis!=0){
//           
//                        plane_dis = dot(centerNormalWithMaterial.xyz,normalize(curPosWithDepth.xyz-centerPosWithDepth.xyz));
//           
//                       }
//                       float weight_plane = plane_dis*plane_dis/(2.0f*m_sigmaPlane);
//                       float weight_pos = pos_dis*pos_dis/(2.0*m_sigmaCoord);
//                       float weight_corlor = color_dis*color_dis/(2.0*m_sigmaColor);
//                       float weight_normal = normal_dis*normal_dis/(2.0*m_sigmaNormal);
//
//
//                       float weight = exp(-(weight_corlor+weight_plane+weight_pos+weight_normal));
//                       weight_sum+=weight;
//                       resColor+=indexColor.rgb*weight;
//                    
//                    }
//                
//                
//                }
//            
//            
//            }
//
//
//            resColor/=weight_sum;
//            vec4 lastPos = texelFetch(PositionWithDepth,ivec2(gl_GlobalInvocationID.xy),0);
//
//            vec4 projectPos =  projection*lastViewMat*vec4(lastPos.xyz,1.0);
//
//            projectPos.xyz/= projectPos.w;
//
//            projectPos.xy = projectPos.xy*0.5+0.5;

            vec4 last = texelFetch(lastFrame,ivec2(gl_GlobalInvocationID.xy),0);


            vec3 outColor  = mix(last.rgb, color.rgb, 1.0/float(frameCounter));

            imageStore(filteredFrame,ivec2(gl_GlobalInvocationID.xy),vec4(outColor.rgb,1.0));
        
        
        }

        
	    else{
        
            imageStore(filteredFrame,ivec2(gl_GlobalInvocationID.xy),vec4(color));
            
        }
	}

}


